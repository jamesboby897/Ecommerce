@model IEnumerable<Ecommerce_Group_Project.Models.CartItem>
@{
    ViewData["Title"] = "Checkout";
    var totalAmount = ViewData["TotalAmount"] as decimal?;
    var taxAmount = ViewData["TaxAmount"] as decimal?;
    var totalWithTax = ViewData["TotalWithTax"] as decimal?;
    var cartItems = ViewData["CartItems"] as IEnumerable<Ecommerce_Group_Project.Models.CartItem>;
    var firstName = ViewData["FirstName"] as string;
    var lastName = ViewData["LastName"] as string;
}

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f8f9fa;
        color: #333;
        margin: 0;
        padding: 0;
    }

    .container {
        max-width: 900px;
        margin: 20px auto;
        padding: 20px;
    }

    h2 {
        text-align: center;
        color: #007bff;
        margin-bottom: 30px;
    }

    .card {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        padding: 20px;
    }

        .card h3 {
            margin-top: 0;
            color: #0056b3;
            border-bottom: 2px solid #e9ecef;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }

        table th, table td {
            text-align: left;
            padding: 10px;
            border-bottom: 1px solid #e9ecef;
        }

        table th {
            background-color: #f8f9fa;
            color: #007bff;
        }

    .summary p {
        margin: 10px 0;
    }

    form {
        display: flex;
        flex-direction: column;
    }

        form div {
            margin-bottom: 15px;
        }

    label {
        font-weight: bold;
        margin-bottom: 5px;
        display: block;
    }

    input, select, button {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 1em;
    }

    button {
        background-color: #007bff;
        color: #fff;
        border: none;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        button:hover {
            background-color: #0056b3;
        }

    .summary p strong {
        font-weight: bold;
        color: #333;
    }

    .summary .total {
        font-size: 1.2em;
    }

    input.invalid {
        border: 2px solid red;
    }

    small.error-message {
        color: red;
        display: none;
    }

        small.error-message.visible {
            display: block;
        }

</style>


<div class="container">
    <h2>Checkout</h2>

    <!-- Order Summary Section -->
    <div class="card">
        <h3>Order Summary</h3>
        <table>
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Subtotal</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in cartItems)
                {
                    <tr>
                        <td>@item.Product.Name</td>
                        <td>@item.Quantity</td>
                        <td>@item.Product.Price.ToString("C")</td>
                        <td>@(item.Quantity * item.Product.Price)</td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="summary">
            <p><strong>Total Amount:</strong> @totalAmount?.ToString("C")</p>
            <p><strong>Tax (13%):</strong> @taxAmount?.ToString("C")</p>
            <p class="total"><strong>Total with Tax:</strong> @totalWithTax?.ToString("C")</p>
        </div>
    </div>

    <!-- Shipping & Billing Section -->
    <div class="card">
        <h3>Shipping & Billing Information</h3>
        <form asp-action="PlaceOrder" method="post">
            <div>
                <label for="firstName">First Name</label>
                <input type="text" id="firstName" name="firstName" value="@firstName" required />
            </div>
            <div>
                <label for="lastName">Last Name</label>
                <input type="text" id="lastName" name="lastName" value="@lastName" required />
            </div>
            <div>
                <label for="phone">Phone</label>
                <input type="tel"
                       id="phone"
                       name="phone"
                       maxlength="10"
                       placeholder="Enter your 10-digit phone number"
                       pattern="^\d{10}$"
                       oninput="validatePhone(this)"
                       required />
                <small class="error-message" id="phone-error" style="display: none;">Invalid phone number. Please enter a 10-digit phone number.</small>
            </div>

            <script>
                // Validate phone number dynamically
                function validatePhone(input) {
                    const phonePattern = /^\d{10}$/; // Exactly 10 digits
                    const errorMessage = document.getElementById('phone-error');

                    if (!phonePattern.test(input.value)) {
                        input.classList.add('invalid');
                        errorMessage.style.display = 'block';
                    } else {
                        input.classList.remove('invalid');
                        errorMessage.style.display = 'none';
                    }
                }
            </script>



            <div>
                <label for="shippingAddress">Shipping Address</label>
                <input type="text"
                       id="shippingAddress"
                       name="shippingAddress"
                       placeholder="Enter your shipping address"
                       oninput="validateAddress(this)"
                       required />
                <small class="error-message" id="shipping-error" style="display: none;">Invalid address. Please provide a valid shipping address.</small>
            </div>

            <div>
                <label for="billingAddress">Billing Address</label>
                <input type="text"
                       id="billingAddress"
                       name="billingAddress"
                       placeholder="Enter your billing address"
                       oninput="validateAddress(this)"
                       required />
                <small class="error-message" id="billing-error" style="display: none;">Invalid address. Please provide a valid billing address.</small>
            </div>

            <script>
                function validateAddress(input) {
                    const addressPattern = /^[a-zA-Z0-9\s,.'-]{10,}$/; // Minimum 10 characters, valid symbols
                    const errorMessage = input.nextElementSibling;

                    // Validate the address
                    if (!addressPattern.test(input.value.trim())) {
                        input.classList.add('invalid');
                        errorMessage.style.display = 'block';
                    } else {
                        input.classList.remove('invalid');
                        errorMessage.style.display = 'none';
                    }
                }
            </script>
            <div>
                <label for="cardNumber">Card Number</label>
                <input type="number"
                       id="cardNumber"
                       name="cardNumber"
                       maxlength="16"
                       placeholder="Enter your 16-digit card number"
                       oninput="validateCardNumber(this)"
                       required />
                <small class="error-message" id="card-error" style="display: none;">Invalid card number. Please enter a valid 16-digit card number.</small>
            </div>

            <script>
                // Validate credit card number
                function validateCardNumber(input) {
                    const rawValue = input.value.replace(/\D/g, ''); // Remove non-numeric characters
                    const cardPattern = /^\d{16}$/; // Regex for valid 16-digit card number
                    const errorMessage = document.getElementById('card-error');

                    // Set the cleaned value back to the input
                    input.value = rawValue;

                    // Validate the card number
                    if (cardPattern.test(rawValue)) {
                        input.classList.remove('invalid');
                        errorMessage.style.display = 'none';
                    } else {
                        input.classList.add('invalid');
                        errorMessage.style.display = 'block';
                    }
                }
            </script>

            <div>
                <label for="cvv">CVV</label>
                <input type="password" id="cvv" name="cvv" maxlength="3" placeholder="3-digit CVV" required />
            </div>
            <div>
                <label for="expiryDate">Expiry Date</label>
                <input type="date"
                       id="expiryDate"
                       name="expiryDate"
                       oninput="validateExpiryDate(this)"
                       required />
                <small class="error-message" id="expiry-error" style="display: none;">Invalid expiry date. Please select a valid date.</small>
            </div>

            <script>
                function validateExpiryDate(input) {
                    const errorMessage = document.getElementById('expiry-error');
                    const today = new Date();
                    const tenYearsFromNow = new Date();
                    tenYearsFromNow.setFullYear(today.getFullYear() + 10);

                    // Parse the selected date
                    const selectedDate = new Date(input.value);

                    // Validate the expiry date
                    if (selectedDate < today || selectedDate > tenYearsFromNow) {
                        // Invalid: Date in the past or more than 10 years in the future
                        input.classList.add('invalid');
                        errorMessage.style.display = 'block';
                    } else {
                        // Valid: Date within allowed range
                        input.classList.remove('invalid');
                        errorMessage.style.display = 'none';
                    }
                }
            </script>


            <button type="submit">Place Order</button>
        </form>
    </div>
</div>

    